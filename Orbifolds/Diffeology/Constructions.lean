import Orbifolds.Diffeology.Induced
import Mathlib.Analysis.InnerProductSpace.Calculus

set_option autoImplicit false

open TopologicalSpace Set

open Topology

section Constructions

instance instDiffeologicalSpaceSubtype {X : Type*} [DiffeologicalSpace X] {p : X ‚Üí Prop} :
    DiffeologicalSpace (Subtype p) :=
  DiffeologicalSpace.induced ((‚Üë) : _ ‚Üí X) inferInstance

instance Pi.diffeologicalSpace {Œπ : Type*} {Y : Œπ ‚Üí Type*}
    [(i : Œπ) ‚Üí DiffeologicalSpace (Y i)] : DiffeologicalSpace ((i : Œπ) ‚Üí Y i) where
  plots n := {p | ‚àÄ i, IsPlot ((fun y => y i) ‚àò p)}
  constant_plots _ i := isPlot_const
  plot_reparam {n m p f} := fun hp hf i => by
    exact Function.comp.assoc _ _ _ ‚ñ∏ isPlot_reparam (hp i) hf
  locality := by sorry

end Constructions

section Pi

variable {Œπ : Type*} {Y : Œπ ‚Üí Type*} [(i : Œπ) ‚Üí DiffeologicalSpace (Y i)]
  {X : Type*} [DiffeologicalSpace X] {f : X ‚Üí ((i : Œπ) ‚Üí Y i)}

theorem dsmooth_pi_iff : DSmooth f ‚Üî ‚àÄ i, DSmooth fun x => f x i := by
  simp only [dsmooth_iff,@forall_comm Œπ _ _]; rfl

@[fun_prop]
theorem dsmooth_pi (h : ‚àÄ i, DSmooth fun a => f a i) : DSmooth f :=
  dsmooth_pi_iff.2 h

@[fun_prop]
theorem dsmooth_apply (i : Œπ) : DSmooth fun p : (i : Œπ) ‚Üí Y i => p i :=
  dsmooth_pi_iff.1 dsmooth_id i

-- TODO. something like this should be true, but I haven't yet figured out the exact details.
instance [Fintype Œπ] [(i : Œπ) ‚Üí TopologicalSpace (Y i)] [(i : Œπ) ‚Üí LocallyCompactSpace (Y i)]
    [(i : Œπ) ‚Üí DTopCompatible (Y i)] : DTopCompatible ((i : Œπ) ‚Üí Y i) := ‚ü®by
  ext s; rw [isOpen_pi_iff',isOpen_iff_preimages_plots]
  refine' ‚ü®fun h => _, fun h n p hp => _‚ü©
  all_goals sorry‚ü©

instance {Œπ : Type*} [Fintype Œπ] {Y : Œπ ‚Üí Type*} [(i : Œπ) ‚Üí NormedAddCommGroup (Y i)]
    [(i : Œπ) ‚Üí NormedSpace ‚Ñù (Y i)] [(i : Œπ) ‚Üí DiffeologicalSpace (Y i)]
    [(i : Œπ) ‚Üí ContDiffCompatible (Y i)] : ContDiffCompatible ((i : Œπ) ‚Üí Y i) :=
  ‚ü®by simp_rw [contDiff_pi,‚ÜêContDiffCompatible.isPlot_iff]; rfl‚ü©

end Pi

section Subtype

variable {X : Type*} [DiffeologicalSpace X] {s : Set X} {p : X ‚Üí Prop}
  {Y : Type*} [DiffeologicalSpace Y]

theorem induction_subtype_val : Induction ((‚Üë) : s ‚Üí X) :=
  ‚ü®Subtype.coe_injective,rfl‚ü©

theorem Induction.of_codRestrict {f : X ‚Üí Y} {t : Set Y} (ht : ‚àÄ x, f x ‚àà t)
    (h : Induction (t.codRestrict f ht)) : Induction f :=
  by sorry

theorem dsmooth_subtype_val : DSmooth ((‚Üë) : s ‚Üí X) :=
  induction_subtype_val.dsmooth

theorem DSmooth.subtype_val {f : Y ‚Üí Subtype p} (hf : DSmooth f) :
    DSmooth fun x => (f x : X) :=
  dsmooth_subtype_val.comp hf

theorem DSmooth.subtype_mk {f : Y ‚Üí X} (hf : DSmooth f) (hp : ‚àÄ x, p (f x)) :
    DSmooth fun x => (‚ü®f x, hp x‚ü© : Subtype p) :=
  hf

theorem DSmooth.subtype_map {f : X ‚Üí Y} (h : DSmooth f) {q : Y ‚Üí Prop}
    (hpq : ‚àÄ x, p x ‚Üí q (f x)) : DSmooth (Subtype.map f hpq) :=
  (h.comp dsmooth_subtype_val).subtype_mk _

theorem dsmooth_inclusion {s t : Set X} (h : s ‚äÜ t) : DSmooth (inclusion h) :=
  dsmooth_id.subtype_map h

theorem DSmooth.codRestrict {f : X ‚Üí Y} {s : Set Y} (hf : DSmooth f) (hs : ‚àÄ a, f a ‚àà s) :
    DSmooth (s.codRestrict f hs) :=
  hf.subtype_mk hs

theorem DSmooth.restrict {f : X ‚Üí Y} {s : Set X} {t : Set Y} (h1 : MapsTo f s t)
    (h2 : DSmooth f) : DSmooth (h1.restrict f s t) :=
  (h2.comp dsmooth_subtype_val).codRestrict _

theorem DSmooth.restrictPreimage {f : X ‚Üí Y} {s : Set Y} (h : DSmooth f) :
    DSmooth (s.restrictPreimage f) :=
  h.restrict _

theorem Induction.codRestrict {f : X ‚Üí Y} (hf : Induction f) {s : Set Y} (hs : ‚àÄ x, f x ‚àà s) :
    Induction (s.codRestrict f hs) :=
  by sorry

/-- TODO: move to Mathlib.Topology.Constructions -/
theorem IsOpenMap.subtype_mk {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
    {s : Set X} {f : Y ‚Üí X} (hf : IsOpenMap f) (hfs : ‚àÄ x, f x ‚àà s) :
    IsOpenMap fun x => (‚ü®f x, hfs x‚ü© : Subtype s) := fun u hu => by
  convert (hf u hu).preimage continuous_subtype_val
  exact Set.ext fun x => exists_congr fun x' => and_congr_right' Subtype.ext_iff

/-- TODO: move to Mathlib.Topology.Constructions -/
theorem IsOpen.isOpenMap_subtype_map {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
    {s : Set X} {t : Set Y} {f : X ‚Üí Y} (hs : IsOpen s) (hf : IsOpenMap f)
    (hst : ‚àÄ x, s x ‚Üí t (f x)) : IsOpenMap (Subtype.map f hst) :=
  (hf.comp hs.isOpenMap_subtype_val).subtype_mk _

/-- TODO: move to Mathlib.Topology.Constructions -/
theorem IsOpen.isOpenMap_inclusion {X : Type*} [TopologicalSpace X] {s t : Set X}
    (hs : IsOpen s) (h : s ‚äÜ t) : IsOpenMap (inclusion h) :=
  hs.isOpenMap_subtype_map IsOpenMap.id h

/-- TODO: move to Mathlib.Topology.Constructions -/
theorem IsOpenMap.codRestrict {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
    {f : X ‚Üí Y} {s : Set Y} (hf : IsOpenMap f) (hs : ‚àÄ a, f a ‚àà s) :
    IsOpenMap (s.codRestrict f hs) :=
  hf.subtype_mk hs

/-- The D-topology is also characterised by the smooth maps `u ‚Üí X` for open `u`. -/
lemma isOpen_iff_preimages_plots' {s : Set X} : IsOpen[DTop] s ‚Üî
    ‚àÄ (n : ‚Ñï) (u : Set (Eucl n)) (p : u ‚Üí X), IsOpen u ‚Üí DSmooth p ‚Üí IsOpen (p ‚Åª¬π' s) := by
  rw [isOpen_iff_preimages_plots]
  refine' ‚ü®fun hs n u p hu hp => _,fun hs n p hp => _‚ü©
  ¬∑ refine' isOpen_iff_mem_nhds.2 fun x hx => _
    let ‚ü®Œµ,hŒµ‚ü© := Metric.isOpen_iff.1 hu x x.2
    let e : Eucl n ‚âÉ‚Çú Metric.ball x.1 Œµ := (Homeomorph.Set.univ _).symm.trans <|
      PartialHomeomorph.univUnitBall.toHomeomorphSourceTarget.trans
        (PartialHomeomorph.unitBallBall x.1 Œµ hŒµ.1).toHomeomorphSourceTarget
    have he : DSmooth e :=
      (((PartialHomeomorph.contDiff_unitBallBall hŒµ.1).dsmooth.restrict
        (PartialHomeomorph.unitBallBall x.1 Œµ hŒµ.1).map_source').comp
          (PartialHomeomorph.contDiff_univUnitBall.dsmooth.restrict
            PartialHomeomorph.univUnitBall.map_source')).comp (dsmooth_id.subtype_mk _)
    have h := hs n _ (hp.comp ((dsmooth_inclusion hŒµ.2).comp he)).isPlot
    simp_rw [preimage_comp, Homeomorph.isOpen_preimage] at h
    apply Metric.isOpen_ball.isOpenMap_inclusion hŒµ.2 _ at h
    rw [image_preimage_eq_inter_range] at h
    exact mem_nhds_iff.2 ‚ü®_,inter_subset_left _ _,h,hx,by simp [hŒµ.1]‚ü©
  ¬∑ let e := Homeomorph.Set.univ (Fin n ‚Üí ‚Ñù)
    rw [‚Üêe.isOpen_preimage,‚Üêpreimage_comp]
    exact hs n _ (p ‚àò e) isOpen_univ (hp.dsmooth.comp dsmooth_subtype_val)

/-- On open subsets, the D-topology and subspace topology agree. -/
protected theorem IsOpen.dTopCompatible [TopologicalSpace X] [DTopCompatible X] (hs : IsOpen s) :
    DTopCompatible s := ‚ü®by
  ext t; refine' ‚ü®fun ht => _,fun ht => _‚ü©
  all_goals rw [‚ÜêSubtype.val_injective.preimage_image t]
  ¬∑ refine' IsOpen.preimage continuous_subtype_val (dTop_eq X ‚ñ∏ _)
    refine' isOpen_iff_preimages_plots.2 fun n p hp => _
    have hs' := hs.preimage hp.dsmooth.continuous'
    convert hs'.isOpenMap_subtype_val _ <| ((isOpen_iff_preimages_plots' (s := t)).1 ht) n _
      (s.restrictPreimage p) hs' hp.dsmooth.restrictPreimage
    ext x; simp_rw [mem_preimage, mem_image, Subtype.exists, exists_and_right, exists_eq_right]; rfl
  ¬∑ refine' @IsOpen.preimage s X DTop _ _ _ _ (hs.isOpenMap_subtype_val t ht)
    exact dTop_eq X ‚ñ∏ dsmooth_subtype_val.continuous‚ü©

instance [TopologicalSpace X] [DTopCompatible X] [h : Fact (IsOpen s)] : DTopCompatible s :=
  h.out.dTopCompatible

/-- Smoothness can also be characterised as preserving smooth maps `u ‚Üí X` for open `u`.-/
theorem dsmooth_iff' {f : X ‚Üí Y} : DSmooth f ‚Üî
    ‚àÄ (n : ‚Ñï) (u : Set (Eucl n)) (p : u ‚Üí X), IsOpen u ‚Üí DSmooth p ‚Üí DSmooth (f ‚àò p) := by
  refine' ‚ü®fun hf n u p _ hp => hf.comp hp,fun hf n p hp => _‚ü©
  rw [‚ÜêFunction.comp_id (f ‚àò p),‚Üê(Homeomorph.Set.univ _).self_comp_symm,‚ÜêFunction.comp.assoc]
  exact ((hf n _ _ isOpen_univ (hp.dsmooth.comp dsmooth_subtype_val)).comp
    (dsmooth_id.subtype_mk _)).isPlot

/-- The locality axiom of diffeologies: any map that is locally a plot is also a plot itself.
I did not make it part of the `DiffeologicalSpace`-structure because I erroneously thougth that
it would also follow as a theorem, but it does not - the `sorry` cannot currently be filled. -/
theorem isPlot_iff_locally_dsmooth {n : ‚Ñï} {p : Eucl n ‚Üí X} : DSmooth p ‚Üî
    ‚àÄ x : Eucl n, ‚àÉ u ‚àà ùìù x,  DSmooth (u.restrict p) := by
  refine' ‚ü®fun hp x => ‚ü®_,Filter.univ_mem,hp.comp dsmooth_subtype_val‚ü©, fun h m f hf => _‚ü©
  sorry

end Subtype

-- TODO: rework all of this
section Coinduced

open IsLocallyConstant PartialHomeomorph in
def DiffeologicalSpace.coinduced' {X Y : Type*} (f : X ‚Üí Y) (dX : DiffeologicalSpace X) :
    DiffeologicalSpace Y where
  plots n := {p | (‚àÉ y, p = fun _ => y) ‚à®
    ‚àÄ x : Eucl n, ‚àÉ u : Set (Eucl n), x ‚àà u ‚àß IsOpen u ‚àß ‚àÉ p' : u ‚Üí X, DSmooth p' ‚àß p ‚àò (‚Üë) = f ‚àò p'}
  constant_plots x := Or.inl ‚ü®x,rfl‚ü©
  plot_reparam {n m p g} := fun hp hg => Or.rec (fun ‚ü®y,hy‚ü© => Or.inl ‚ü®y,hy ‚ñ∏ rfl‚ü©)
    (fun h => Or.inr fun x => (by
      let ‚ü®u,hxu,hu,p',hp',hp''‚ü© := h (g x)
      refine' ‚ü®g ‚Åª¬π' u,hxu,hu.preimage hg.continuous,p' ‚àò u.restrictPreimage g,
        hp'.comp hg.dsmooth.restrictPreimage,_‚ü©
      simp_rw [‚ÜêFunction.comp.assoc,‚Üêhp'',Function.comp.assoc]; rfl)) hp
  locality {n p} := fun h => by
    dsimp
    sorry

variable {X Y : Type*} [dX : DiffeologicalSpace X] [dY : DiffeologicalSpace Y]

def Subduction (f : X ‚Üí Y) : Prop := Function.Surjective f ‚àß dY = dX.coinduced f

protected theorem Subduction.dsmooth {f : X ‚Üí Y} (hf : Subduction f) : DSmooth f :=
  fun n p hp => by rw [hf.2]; sorry

end Coinduced
